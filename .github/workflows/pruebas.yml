# Estructura bascia de un workflow

name: Pruebas de athena Bank

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
    test:
        runs-on: ubuntu-latest

        services:
            mongo:
                image: mongo:6.0
                ports:
                    - 27017:27017
    
        env:
            MONGO_URI: ${{ secrets.MONGO_URI }}
            JWT_SECRET: ${{ secrets.JWT_SECRET }}
            PORT: 6007
            VITE_API_BASE: http://localhost:6007/api

        steps:
            - name: Checkout repo actual que incluye workflow
              uses: actions/checkout@v4
            
            - name: Clonar repo Athena Redux Bank
              run: |
                git clone https://github.com/juantor16/redux-athena-bank.git app

            - name: Crear un archivo .env para el backend
              run: |
                echo "MONGO_URI=${{ secrets.MONGO_URI }}" > app/backend/.env
                echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> app/backend/.env
                echo "PORT=${{ env.PORT }}" >> app/backend/.env
            
            - name: Instalar dependencias para backend
              run: |
                cd app/backend
                npm install

            - name: Levantar el backend
              run: |
                cd app/backend
                npm run dev > backend.log 2>&1 &
              env:
                PORT: ${{ env.PORT }}
                MONGO_URI: ${{ env.MONGO_URI }}
                JWT_SECRET: ${{ env.JWT_SECRET }}
            
            - name: Instalar wait-on
              run: npm install -g wait-on

            - name: Esperar a que el backend este listo
              run: wait-on tcp:6007

            - name: Instalar dependencias de frontend
              run: |
                cd app/frontend
                npm install

            - name: Levantar el frontend
              run: |
                cd app/frontend
                npm run dev > frontend.log 2>&1 &
              env:
                VITE_API_BASE: http://localhost:6007/api
            
            - name: Esperar a que el frontend este listo
              run: wait-on http://localhost:3000

            - name: Instalar y ejecutar pruebas (Con chromium)
              run: |
                npm install
                npx playwright install
                npx playwright test --reporter=html
            
            - name: Guardar reportes como artefactos
              if: always()
              uses: actions/upload-artifact@v4
              with:
                name: playwright-report
                path: ./playwright-report

            - name: Deployar reporte a gihub pages
              if: always()
              run: |
                git config --global user.name "github-actions[bot]"
                git config --global user.email "github-actions[bot]@users.noreply.github.com"

                # Clonar rama de gh-pages en carpeta temporal
                cd $RUNNER_TEMP
                git clone --branch gh-pages https://x-access-token:${{ secrets.GH_PAGES_PAT }}@github.com/${{ github.repository }} gh-pages}
                
                cd gh-pages

                # Limpiamos el contenido viejo
                rm -rf ./*

                # Copiamos el contenido del reporte
                mkdir -p report-${GITHUB_RUN_NUMBER}
                cp -r $GITHUB_WORKSPACE/playwright-report/* ./report-${GITHUB_RUN_NUMBER}

                # commiteamos y pusheamos los cambios
                git add .
                git commit -m "Reporte de playwright - Ejecucion #${GITHUB_RUN_NUMBER}"
                git push origin gh-pages

            - name: Imprimir URL de reporte en consola
              if: always()
              run: |
                echo "ðŸ”— Reporte disponible en: https://${{github.repository_owner}}.github.io${{github.event.repository.name}}/report-${{github.run_number}}/"